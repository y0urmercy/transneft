import os
import sys
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
src_root = os.path.dirname(os.path.dirname(current_dir))
sys.path.insert(0, src_root)

from data_preparation.document_parser import DocumentParser
from data_preparation.chunker import SemanticChunker
from data_preparation.benchmark_creator import BenchmarkCreator
from core.vector_store import VectorStore
from utils.config import DOCUMENT_PATH, VECTOR_STORE_DIR


def setup_complete_system():
    """–ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ QA-—Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∫–µ–π—Å–∞ 3"""
    print("üéØ –ù–ê–°–¢–†–û–ô–ö–ê –ö–ï–ô–°–ê 3: QA-–°–ò–°–¢–ï–ú–ê –ü–ê–û ¬´–¢–†–ê–ù–°–ù–ï–§–¢–¨¬ª")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if not os.path.exists(DOCUMENT_PATH):
        print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {DOCUMENT_PATH}")
        print("üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª .docx –≤ src/data/raw/")
        return False

    try:
        # 1. –ü–ê–†–°–ò–ù–ì –î–û–ö–£–ú–ï–ù–¢–ê
        print("\nüìÑ 1. –ü–ê–†–°–ò–ù–ì –î–û–ö–£–ú–ï–ù–¢–ê...")
        parser = DocumentParser()
        elements = parser.parse_document(DOCUMENT_PATH)

        if not elements:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
            return False

        parser.analyze_document(elements)

        # 2. –ß–ê–ù–ö–û–í–ê–ù–ò–ï
        print("\n‚úÇÔ∏è  2. –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ï –ß–ê–ù–ö–û–í–ê–ù–ò–ï...")
        chunker = SemanticChunker()
        chunks = chunker.create_chunks(elements)

        if not chunks:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å chunks")
            return False

        chunker.analyze_chunks(chunks)

        # 3. –í–ï–ö–¢–û–†–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï
        print("\nüîç 3. –°–û–ó–î–ê–ù–ò–ï –í–ï–ö–¢–û–†–ù–û–ì–û –•–†–ê–ù–ò–õ–ò–©–ê...")
        vector_store = VectorStore()
        vector_store.create_embeddings(chunks)
        vector_store.save_index(VECTOR_STORE_DIR)

        # 4. –°–û–ó–î–ê–ù–ò–ï –ë–ï–ù–ß–ú–ê–†–ö–ê
        print("\nüìä 4. –°–û–ó–î–ê–ù–ò–ï QA-–ë–ï–ù–ß–ú–ê–†–ö–ê...")
        benchmark_creator = BenchmarkCreator()
        benchmark = benchmark_creator.create_complete_benchmark()

        if benchmark:
            benchmark_creator.analyze_benchmark(benchmark)

        print("\n" + "=" * 60)
        print("üéâ –ö–ï–ô–° 3 –£–°–ü–ï–®–ù–û –ù–ê–°–¢–†–û–ï–ù!")
        print("\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:")
        print("   ‚úÖ data/processed/document_elements.json")
        print("   ‚úÖ data/processed/document_chunks.json")
        print("   ‚úÖ models/vector_store/ (–≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)")
        print("   ‚úÖ data/processed/transneft_qa_benchmark_final_40.json")

        print("\nüöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´:")
        print("   python main.py")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = setup_complete_system()
    if not success:
        sys.exit(1)