# scripts/simple_rag_system.py
import json
from vector_store import VectorStore
from typing import List, Dict


class SimpleRAGSystem:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç —Ç—è–∂–µ–ª—ã—Ö –º–æ–¥–µ–ª–µ–π"""

    def __init__(self, vector_store_path: str = "models/vector_store"):
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.vector_store = VectorStore()
        self.vector_store.load_index(vector_store_path)

        print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")

    def answer_question(self, question: str, k_retrieval: int = 3) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"""

        # –®–∞–≥ 1: –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö chunks
        retrieved_docs = self.vector_store.search(question, k=k_retrieval)

        if not retrieved_docs:
            return {
                "answer": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.",
                "sources": [],
                "confidence": 0.0
            }

        # –®–∞–≥ 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        answer = self._extract_best_answer(question, retrieved_docs)

        # –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        sources = []
        total_confidence = 0.0

        for doc_text, metadata, score in retrieved_docs:
            sources.append({
                "content": doc_text[:200] + "...",
                "sections": metadata.get('sections', []),
                "score": score,
                "chunk_id": metadata.get('chunk_id')
            })
            total_confidence += score

        avg_confidence = total_confidence / len(retrieved_docs) if retrieved_docs else 0.0

        return {
            "answer": answer,
            "sources": sources,
            "confidence": avg_confidence,
            "retrieved_docs_count": len(retrieved_docs)
        }

    def _extract_best_answer(self, question: str, retrieved_docs: List) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        question_words = set(question.lower().split())

        best_answer = ""
        best_score = 0

        for doc_text, metadata, score in retrieved_docs:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            sentences = [s.strip() for s in doc_text.split('.') if s.strip()]

            for sentence in sentences:
                if len(sentence) < 20:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    continue

                sentence_words = set(sentence.lower().split())
                common_words = question_words.intersection(sentence_words)
                relevance_score = len(common_words)

                if relevance_score > best_score:
                    best_score = relevance_score
                    best_answer = sentence

        if best_answer:
            return f"–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {best_answer.strip()}."
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª–æ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            most_relevant_doc = retrieved_docs[0][0]
            return f"–ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {most_relevant_doc[:300]}..."


# –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
if __name__ == "__main__":
    rag_system = SimpleRAGSystem()

    test_questions = [
        "–ö–æ–≥–¥–∞ –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å?",
        "–ö–∞–∫–æ–π —É—Å—Ç–∞–≤–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª —É –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç–∏?",
        "–°–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤ —É –∫–æ–º–ø–∞–Ω–∏–∏?"
    ]

    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ô RAG –°–ò–°–¢–ï–ú–´:")
    for question in test_questions:
        result = rag_system.answer_question(question)
        print(f"\n‚ùì {question}")
        print(f"üí¨ {result['answer']}")
        print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.3f}")