import os
import sys
import time
from typing import Dict, List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = os.path.dirname(os.path.abspath(__file__))
src_root = os.path.dirname(os.path.dirname(current_dir))
sys.path.insert(0, src_root)

from utils.config import VECTOR_STORE_DIR, TOP_K_RESULTS, SIMILARITY_THRESHOLD
from core.vector_store import VectorStore
from core.retrieval_engine import RetrievalEngine


class TransneftQASystem:
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è QA —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ü–ê–û ¬´–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å¬ª"""

    def __init__(self, vector_store_path: str = VECTOR_STORE_DIR):
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QA —Å–∏—Å—Ç–µ–º—ã –ü–ê–û ¬´–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å¬ª...")
        self.vector_store = VectorStore()
        self.retrieval_engine = RetrievalEngine()
        self.vector_store_path = vector_store_path
        self.initialized = False

        try:
            self.vector_store.load_index(vector_store_path)
            self.initialized = True
            print("‚úÖ QA —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = self.vector_store.get_stats()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {stats['total_chunks']} chunks, {stats['total_vectors']} –≤–µ–∫—Ç–æ—Ä–æ–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ QA —Å–∏—Å—Ç–µ–º—ã: {e}")
            print("\nüí° –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–∏—Å—Ç–µ–º—ã:")
            print("   python scripts/setup_system.py")
            raise

    def answer_question(self, question: str) -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.initialized:
            return "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–∏—Å—Ç–µ–º—ã."

        if not question or not question.strip():
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ü–ê–û ¬´–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å¬ª."

        start_time = time.time()

        try:
            # 1. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            search_results = self.vector_store.search(
                question,
                k=TOP_K_RESULTS,
                threshold=SIMILARITY_THRESHOLD
            )

            if not search_results:
                return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ü–ê–û ¬´–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å¬ª –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

            # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
            contexts = [chunk for chunk, metadata, score in search_results]

            # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            answer = self.retrieval_engine.answer_question(question, contexts)

            processing_time = time.time() - start_time
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")

            return answer

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    def get_search_stats(self, question: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if not self.initialized:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}

        try:
            search_results = self.vector_store.search(question, k=TOP_K_RESULTS)

            return {
                'question': question,
                'question_type': self.retrieval_engine.analyze_question_type(question),
                'results_found': len(search_results),
                'top_scores': [score for _, _, score in search_results],
                'top_sections': [metadata.get('sections', ['Unknown'])[0] for _, metadata, _ in search_results]
            }
        except Exception as e:
            return {"error": str(e)}

    def get_system_info(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        if not self.initialized:
            return {"status": "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}

        stats = self.vector_store.get_stats()

        return {
            "status": "–ê–∫—Ç–∏–≤–Ω–∞",
            "vector_store": stats,
            "retrieval_engine": "Retrieval-only (–±–µ–∑ LLM)",
            "model": stats.get("model", "Unknown"),
            "total_chunks": stats.get("total_chunks", 0),
            "similarity_threshold": SIMILARITY_THRESHOLD
        }

    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
        if not self.initialized:
            return False

        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_results = self.vector_store.search("–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å", k=1)
            return len(test_results) > 0
        except:
            return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QA —Å–∏—Å—Ç–µ–º—ã
    try:
        qa_system = TransneftQASystem()

        test_questions = [
            "–°–∫–æ–ª—å–∫–æ –∞–∫—Ü–∏–π –≤ —É—Å—Ç–∞–≤–Ω–æ–º –∫–∞–ø–∏—Ç–∞–ª–µ?",
            "–ö–æ–≥–¥–∞ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è?",
            "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
            "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞—É–¥–∏—Ç–æ—Ä–æ–º –∫–æ–º–ø–∞–Ω–∏–∏?"
        ]

        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï QA –°–ò–°–¢–ï–ú–´:")
        print("=" * 50)

        for i, question in enumerate(test_questions, 1):
            print(f"\n{i}. ‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            answer = qa_system.answer_question(question)
            print(f"   üí° –û—Ç–≤–µ—Ç: {answer}")

            stats = qa_system.get_search_stats(question)
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['results_found']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ª—É—á—à–∏–π score: {stats['top_scores'][0]:.3f}")

        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")