"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Å—Ç–∏–ª–µ –ì–æ—Å—É—Å–ª—É–≥ –¥–ª—è Streamlit
"""

import streamlit as st
import os
import uuid
from PIL import Image
import base64
from typing import Optional, Dict, Any
from datetime import datetime
import pandas as pd
import plotly.express as px

class GosuslugiUI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Å—Ç–∏–ª–µ –ì–æ—Å—É—Å–ª—É–≥"""
    
    @staticmethod
    def load_css(css_file_path: str = "css/gosuslugi_style.css"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ CSS —Å—Ç–∏–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(css_file_path):
                with open(css_file_path, 'r', encoding='utf-8') as f:
                    css_content = f.read()
                st.markdown(f'<style>{css_content}</style>', unsafe_allow_html=True)
            else:
                st.warning(f"CSS —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {css_file_path}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS: {e}")
    
    @staticmethod
    def create_header(user_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ –≤ —Å—Ç–∏–ª–µ –ì–æ—Å—É—Å–ª—É–≥"""
        col1, col2, col3 = st.columns([3, 2, 1])
        
        with col1:
            st.markdown(f"""
            <div class="main-header">
                <h1 style="margin:0; font-size: 2rem;">ü§ñ –ü–æ–º–æ—â–Ω–∏–∫ –ü–ê–û "–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å"</h1>
                <p style="margin:0; opacity: 0.9; font-size: 1.1rem;">–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            GosuslugiUI.display_user_profile(user_name)
    
    @staticmethod
    def display_user_profile(user_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
        avatar_path = "assets/user_avatar.png"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É assets –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs("assets", exist_ok=True)
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            # –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if os.path.exists(avatar_path):
                try:
                    image = Image.open(avatar_path)
                    st.image(image, width=50, use_column_width=False)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}")
                    GosuslugiUI._display_default_avatar()
            else:
                GosuslugiUI._display_default_avatar()
        
        with col2:
            st.markdown(f"""
            <div style="text-align: left;">
                <p style="margin: 0; font-weight: 600; font-size: 0.9rem;">{user_name}</p>
                <p style="margin: 0; font-size: 0.8rem; color: #666;">–ü—Ä–æ—Ñ–∏–ª—å</p>
            </div>
            """, unsafe_allow_html=True)
    
    @staticmethod
    def _display_default_avatar():
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
        st.markdown("""
        <div style="text-align: center;">
            <div style="width: 50px; height: 50px; background: linear-gradient(135deg, #1e6cde 0%, #0d4ba3 100%); 
                 border-radius: 50%; display: flex; align-items: center; justify-content: center; 
                 margin: 0 auto; color: white; font-weight: bold; font-size: 18px;">
                üë§
            </div>
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def upload_avatar():
        """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
        st.sidebar.markdown("---")
        st.sidebar.subheader("üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        
        uploaded_file = st.sidebar.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä", 
            type=['png', 'jpg', 'jpeg'],
            help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 200x200 –ø–∏–∫—Å–µ–ª–µ–π"
        )
        
        if uploaded_file is not None:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                avatar_path = "assets/user_avatar.png"
                with open(avatar_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                
                st.sidebar.success("‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                image = Image.open(uploaded_file)
                st.sidebar.image(image, width=100, caption="–í–∞—à –Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä")
                
            except Exception as e:
                st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞ar: {e}")
    
    @staticmethod
    def create_search_section():
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –≤ —Å—Ç–∏–ª–µ –ì–æ—Å—É—Å–ª—É–≥"""
        st.markdown("""
        <div class="search-container">
            <h3 style="margin-top: 0;">üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ü–ê–û "–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å"</h3>
            <p style="color: #666; margin-bottom: 1.5rem;">
                –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–∞–Ω–∏–∏, –µ—ë –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞—Ö
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def display_chat_message(message: str, is_user: bool = True, timestamp: str = None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
        message_class = "chat-message-user" if is_user else "chat-message-bot"
        icon = "üë§" if is_user else "ü§ñ"
        
        timestamp_html = f'<small style="opacity: 0.7; font-size: 0.8rem;">{timestamp}</small>' if timestamp else ""
        
        st.markdown(f"""
        <div class="{message_class}">
            <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                <span style="margin-right: 0.5rem;">{icon}</span>
                <strong>{'–í—ã' if is_user else '–ü–æ–º–æ—â–Ω–∏–∫ –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å'}</strong>
            </div>
            <div style="line-height: 1.5;">{message}</div>
            {timestamp_html}
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def display_source_documents(sources: list, max_display: int = 3):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if sources:
            st.markdown("**üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:**")
            for i, source in enumerate(sources[:max_display]):
                if isinstance(source, dict):
                    source_content = source.get('content', '')[:150] + "..." if len(source.get('content', '')) > 150 else source.get('content', '')
                    source_section = source.get('section', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                else:
                    source_content = source.page_content[:150] + "..." if len(source.page_content) > 150 else source.page_content
                    source_section = getattr(source, 'metadata', {}).get('section', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                st.markdown(f"""
                <div class="source-card">
                    <strong>üîπ –ò—Å—Ç–æ—á–Ω–∏–∫ {i+1}</strong> ({source_section})
                    <br>
                    <span style="font-size: 0.9rem;">{source_content}</span>
                </div>
                """, unsafe_allow_html=True)
    
    @staticmethod
    def create_service_card(title: str, description: str, icon: str = "üìã"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥–∏ –≤ —Å—Ç–∏–ª–µ –ì–æ—Å—É—Å–ª—É–≥"""
        st.markdown(f"""
        <div class="service-card">
            <div style="display: flex; align-items: center; margin-bottom: 0.5rem;">
                <span style="font-size: 1.5rem; margin-right: 0.5rem;">{icon}</span>
                <h4 style="margin: 0;">{title}</h4>
            </div>
            <p style="margin: 0; color: #666;">{description}</p>
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def display_metric_card(title: str, value: Any, delta: str = None, help_text: str = None):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–æ–π"""
        delta_html = f"<br><small>{delta}</small>" if delta else ""
        help_html = f'<br><small style="color: #666;">{help_text}</small>' if help_text else ""
        
        st.markdown(f"""
        <div class="metric-card">
            <h4 style="margin: 0 0 0.5rem 0; color: #333;">{title}</h4>
            <h2 style="margin: 0; color: #1e6cde;">{value}</h2>
            {delta_html}
            {help_html}
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def create_sidebar_navigation():
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ"""
        st.sidebar.markdown("""
        <div class="sidebar-header">
            <h3 style="margin: 0;">üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è</h3>
            <p style="margin: 0; opacity: 0.9;">–°–∏—Å—Ç–µ–º–∞ –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å QA</p>
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def display_system_status(status: str, message: str):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        status_class = {
            "ready": "system-status-ready",
            "loading": "system-status-loading", 
            "error": "system-status-error"
        }.get(status, "system-status-loading")
        
        st.markdown(f"""
        <div class="{status_class}" style="text-align: center;">
            {message}
        </div>
        """, unsafe_allow_html=True)
    
    @staticmethod
    def create_quick_actions():
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìä –û—Ü–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", use_container_width=True):
                st.session_state.current_tab = "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞"
                st.rerun()
        
        with col2:
            if st.button("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", use_container_width=True):
                st.session_state.current_tab = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
                st.rerun()
        
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
                st.rerun()


class DatabaseUI:
    """UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def display_chat_history_controls():
        """–≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞"""
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", use_container_width=True):
                st.session_state.save_session = True
        
        with col2:
            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", use_container_width=True):
                st.session_state.show_stats = True
        
        with col3:
            if st.button("üîÑ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", use_container_width=True):
                st.session_state.current_session = str(uuid.uuid4())
                st.session_state.chat_history = []
                st.rerun()
    
    @staticmethod
    def display_feedback_form(message_id: int):
        """–§–æ—Ä–º–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
        with st.expander("üí¨ –û—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç"):
            col1, col2 = st.columns([1, 3])
            
            with col1:
                rating = st.selectbox(
                    "–û—Ü–µ–Ω–∫–∞:",
                    [1, 2, 3, 4, 5],
                    format_func=lambda x: "‚≠ê" * x,
                    key=f"rating_{message_id}"
                )
            
            with col2:
                feedback = st.text_area(
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
                    placeholder="–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
                    key=f"feedback_{message_id}",
                    height=60
                )
            
            if st.button("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", key=f"submit_feedback_{message_id}"):
                try:
                    from database_models import db_manager
                    db_manager.add_feedback(message_id, rating, feedback)
                    st.success("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
    
    @staticmethod
    def display_session_analytics(stats: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            GosuslugiUI.display_metric_card(
                "–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π",
                stats.get('total_messages', 0)
            )
        
        with col2:
            GosuslugiUI.display_metric_card(
                "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞",
                f"{stats.get('avg_response_time', 0):.1f}—Å"
            )
        
        with col3:
            GosuslugiUI.display_metric_card(
                "–û—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
                stats.get('rated_messages', 0)
            )
        
        with col4:
            avg_rating = stats.get('avg_rating', 0)
            GosuslugiUI.display_metric_card(
                "–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞",
                f"{avg_rating:.1f}‚≠ê" if avg_rating > 0 else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            )
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
        if stats.get('daily_stats'):
            df_daily = pd.DataFrame(stats['daily_stats'])
            fig = px.line(
                df_daily, 
                x='date', 
                y='message_count',
                title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º",
                labels={'date': '–î–∞—Ç–∞', 'message_count': '–°–æ–æ–±—â–µ–Ω–∏–π'}
            )
            st.plotly_chart(fig, use_container_width=True)
    
    @staticmethod
    def display_export_options():
        """–û–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        st.markdown("### üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            export_format = st.selectbox(
                "–§–æ—Ä–º–∞—Ç:",
                ["json", "csv"]
            )
        
        with col2:
            export_scope = st.selectbox(
                "–û–±–ª–∞—Å—Ç—å:",
                ["current_session", "all_sessions"]
            )
        
        with col3:
            if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
                try:
                    from database_models import db_manager
                    
                    session_id = None
                    if export_scope == "current_session":
                        session_id = st.session_state.get('current_session', 'default')
                    
                    exported_data = db_manager.export_chat_history(
                        session_id, 
                        export_format
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º downloadable —Ñ–∞–π–ª
                    file_extension = export_format
                    mime_type = "application/json" if export_format == "json" else "text/csv"
                    file_name = f"chat_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{file_extension}"
                    
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                        data=exported_data,
                        file_name=file_name,
                        mime=mime_type,
                        use_container_width=True
                    )
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


class AvatarManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏"""
    
    @staticmethod
    def get_available_avatars() -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤"""
        avatars_dir = "assets/avatars"
        os.makedirs(avatars_dir, exist_ok=True)
        
        available_avatars = []
        for file in os.listdir(avatars_dir):
            if file.lower().endswith(('.png', '.jpg', '.jpeg')):
                available_avatars.append(os.path.join(avatars_dir, file))
        
        return available_avatars
    
    @staticmethod
    def create_default_avatar():
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞"""
        avatar_path = "assets/user_avatar.png"
        os.makedirs("assets", exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
        try:
            from PIL import Image, ImageDraw
            img = Image.new('RGB', (200, 200), color='#1e6cde')
            draw = ImageDraw.Draw(img)
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            for i in range(200):
                r = int(30 + (225 - 30) * i / 200)
                g = int(108 + (255 - 108) * i / 200)
                b = int(222 + (255 - 222) * i / 200)
                draw.line([(0, i), (200, i)], fill=(r, g, b))
            
            # –†–∏—Å—É–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            draw.ellipse([50, 50, 150, 150], fill='white')
            draw.ellipse([75, 75, 125, 125], fill='#1e6cde')
            
            img.save(avatar_path)
            return avatar_path
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞: {e}")
            return None
    
    @staticmethod
    def image_to_base64(image_path: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64"""
        try:
            with open(image_path, "rb") as img_file:
                return base64.b64encode(img_file.read()).decode()
        except:
            return ""